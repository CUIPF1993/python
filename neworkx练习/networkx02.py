import networkx as nx
import matplotlib.pyplot as plt

edges = [(0,1),(2,3),(1,3),(2,5),(4,6),(6,7),(5,7),(1,5),(2,6)]
G = nx.DiGraph(edges)       #构建一个有向图，但无权重值，
print(G[1])     #输出以1为源节点指向的其他节点 
#{3: {}, 5: {}}
print(nx.all_neighbors(G,1))        
#<itertools.chain object at 0x016BAE50>
print(list(nx.all_neighbors(G,1)))      #输出以1位节点的其他节点    
#[0, 3, 5]

#1.1度
print(G.out_degree(1))      #出度：由源节点指向其他节点的边数2；
print(G.in_degree(1))   #入度：其他节点指向源节点的边数1；     
print(G.degree(1))      #度：出度与入度的和3。

#返回图中所有节点的度的数量
print(nx.degree(G))       
#{0: 1, 1: 3, 2: 3, 3: 2, 4: 1, 5: 3, 6: 3, 7: 2}
#返回图中所有节点的度分布序列（从0至最大度的出现频次）
print( nx.degree_histogram(G))
#[0, 2, 2, 4]

G = nx.Graph(edges)       #构建一个无向图，但无权重值，
#1.2节点度中心系数。通过节点的度表示节点在图中的重要性。
print(nx.degree_centrality(G))
'''
{0: 0.14285714285714285, 1: 0.42857142857142855,
 2: 0.42857142857142855, 3: 0.2857142857142857, 
 4: 0.14285714285714285, 5: 0.42857142857142855,
 6: 0.42857142857142855, 7: 0.2857142857142857}
'''

#1.3节点距离中心系数。通过距离来表示节点在图中的重要性，
#该值越大表示节点到其他节点的距离越近，即中心性越高。
print(nx.degree_centrality(G))
'''
{0: 0.14285714285714285, 1: 0.42857142857142855,
 2: 0.42857142857142855, 3: 0.2857142857142857, 
 4: 0.14285714285714285, 5: 0.42857142857142855,
 6: 0.42857142857142855, 7: 0.2857142857142857}
'''
#由于创建的图没有没有权重值，所以，默认权重值向图，顾上下两处输出相同


#1.4图或网络的三角性。即图或网络中，认识同一个节点的两个节点也可能认识双方
print(nx.triangles(G))
#{0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0}

#1.5
#图或网络的传递性。即图或网络中，认识同一个节点的两个节点也可能认识双方
print(nx.transitivity(G))       #0.0












 

    